"""
Django settings for wa_utilities project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os, json
from pathlib import Path
from datetime import timedelta
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# Get secrets from `secrets.json` file
with open(os.path.join(BASE_DIR, 'secrets.json')) as f:
    secrets = json.loads(f.read())

def get_secret(key, secrets=secrets):
    """Get the secret variable or return explicit exception."""
    try:
        return secrets[key]
    except KeyError:
        error_msg = "Set the {0} environment variable".format(key)
        raise ImproperlyConfigured(error_msg)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ki(29s)5u+&_x!h8&+xi(3%di&8ny1k8j58rd$pvanb_7##%4t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_secret("DEBUG_MODE")

ALLOWED_HOSTS = ["*"]

SSH_HOST = get_secret("SSH_HOST")
SSH_USERNAME = get_secret("SSH_USERNAME")
SSH_PASSWORD = get_secret("SSH_PASSWORD")
IMPORT_JOB_FOLDER_PATH = get_secret("IMPORT_JOB_FOLDER_PATH")
EXPORT_JOB_FOLDER_PATH = get_secret("EXPORT_JOB_FOLDER_PATH")
ALLOW_SSH_UNKNOWN_HOSTS = get_secret("ALLOW_SSH_UNKNOWN_HOSTS")

# Application definition

INSTALLED_APPS = [
    # Defined App
    'files_logs.apps.FilesLogsConfig',
    'accounts.apps.AccountsConfig',
    'jobs.apps.JobsConfig',
    'ftpserver.apps.FtpserverConfig',
    'authentcation.apps.AuthentcationConfig',
    'reporting.apps.ReportingConfig',

    # 3rd party libs
    'phonenumber_field',
    'ftplib',
    'rest_framework',
    'knox',
    'django_rest_passwordreset',
    'corsheaders',

    #default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
        'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ORIGIN_ALLOW_ALL = True
ROOT_URLCONF = 'wa_utilities.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_USER_MODEL = 'accounts.Account' # Implementing Custom User Model

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # To receive email in dev server

REST_KNOX = {
  'TOKEN_TTL': timedelta(hours=24),
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
     ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
        'rest_framework.filters.SearchFilter',
    ],
}
# DJANGO_REST_LOOKUP_FIELD = 'email'
DJANGO_REST_PASSWORDRESET_TOKEN_CONFIG = {
    "CLASS": "django_rest_passwordreset.tokens.RandomStringTokenGenerator",
    "OPTIONS": {
        "min_length": 20,
        "max_length": 30
    }
}

WSGI_APPLICATION = 'wa_utilities.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASE SECRETS
USE_SQLITE = get_secret("USE_SQLITE")

DATABASE_HOST = get_secret("DATABASE_HOST")
DATABASE_PORT = get_secret("DATABASE_PORT")
DATABASE_NAME = get_secret("DATABASE_NAME")
DATABASE_USERNAME = get_secret("DATABASE_USERNAME")
DATABASE_PASSWORD = get_secret("DATABASE_PASSWORD")

if USE_SQLITE:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'HOST': DATABASE_HOST,
            'PORT': DATABASE_PORT,
            'NAME': DATABASE_NAME,
            'USER': DATABASE_USERNAME,
            'PASSWORD': DATABASE_PASSWORD,
        }
    }

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_USE_TLS = get_secret("EMAIL_USE_TLS")
EMAIL_HOST = get_secret("EMAIL_HOST")
EMAIL_PORT = get_secret("EMAIL_PORT")
EMAIL_HOST_USER = get_secret("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = get_secret("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = get_secret("DEFAULT_FROM_EMAIL")


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    os.path.join(BASE_DIR, 'media'),
]
STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static_cdn')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_cdn')

uSERNAME = 'stephan'
pASSWORD = 'testing321'
hOST = 'localhost'
pORT = '10021'
pATH = '' #optional
#Storage setup for FTP
DEFAULT_FILE_STORAGE = 'ftpserver.ftp.FTPStorage'
FTP_STORAGE_LOCATION = 'ftp://'+ uSERNAME +':'+ pASSWORD +'@'+ hOST +':'+ pORT
